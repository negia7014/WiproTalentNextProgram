Find orderedWords
Objective: The goal is to implement a function that identifies and counts "ordered words" within a given input string.
Definition of an "Ordered Word":
An ordered word is defined as a word in which its constituent letters appear in the same or strictly increasing order based on their ASCII (or Unicode) values.
input1: This is a String that contains one or more words.
Word Separation: Words within input1 are guaranteed to be separated by a single whitespace character.
Character Case: Words can contain both uppercase and lowercase English alphabets.
ASCII Comparison: The comparison of letters to determine if a word is "ordered" must be case-sensitive. This means the ASCII values of the characters 
should be used directly for comparison (e.g., 'a' has a different ASCII value than 'A', and 'A' < 'a').


import java.lang.*; // This import is often implicitly available or part of standard boilerplate

class UserMainCode {
    public int findOrderedWords(String input1) {
        String[] words = input1.split(" ");
        int orderedWordCount = 0;
        for (String word : words) {
            // Skip empty strings that might result from multiple spaces if input validation allows (though problem says "single whitespace")
            if (word.isEmpty()) {
                continue;
            }
          boolean isOrdered = true;
            // A single-character word is always considered ordered
            if (word.length() > 1) {
                for (int i = 0; i < word.length() - 1; i++) {
                    if (word.charAt(i) > word.charAt(i + 1)) {
                        isOrdered = false; 
                        break;
                    }
                }
            }
            if (isOrdered) {
                orderedWordCount++;
            }
        }
       return orderedWordCount;
    }
}
